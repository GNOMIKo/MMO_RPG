from txt_database import JsonDatabase, printd
import random
import json

def load_game_items(filename='game_items.json'):
    with open(filename, 'r') as f:
        return json.load(f)

game_items = load_game_items()
SHOP = game_items['SHOP']
HEALTH_ITEMS = game_items['HEALTH_ITEMS']
DAMAGE_ITEMS = game_items['DAMAGE_ITEMS']
TREASURES = game_items['TREASURES']
MONSTERS = game_items.get('MONSTERS', {})
QUESTS = game_items.get('QUESTS', {})  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–≤–µ—Å—Ç—ã

db = JsonDatabase()
db.load()

print("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:")
for pid, username in db.list_players().items():
    print(f"ID: {pid}, Username: {username}")

player_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ 'new' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: ")
if player_id == 'new':
    username = input("–ò–º—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞: ")
    new_id = str(len(db.data) + 1)
    db.create_player(new_id, {
        'username': username,
        'gold': 10,
        'damage': 10,
        'lvl': 1,
        'health': 100,
        'inventory': [],
        'quests': {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –∫–≤–µ—Å—Ç–æ–≤
    })
    db.set_current_player(new_id)
else:
    db.set_current_player(player_id)

player = db.get_current_player()
if not player:
    print("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit()

def save_player(db, player):
    db.update_current_player(player)
    printd(f'[–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {player["username"]}]')

def shop(db, player):
    print('–í –º–∞–≥–∞–∑–∏–Ω–µ –µ—Å—Ç—å:')
    for item, price in SHOP.items():
        print(f'{item} - {price} –∑–æ–ª–æ—Ç–∞')
    while True:
        print(f'–£ —Ç–µ–±—è {player["gold"]} –∑–æ–ª–æ—Ç–∞.')
        buy = input('–ß—Ç–æ –∫—É–ø–∏—Ç—å? (–∏–ª–∏ "–≤—ã–π—Ç–∏"): ').title()
        if buy == '–í—ã–π—Ç–∏' or buy == '':
            break
        elif buy in SHOP:
            if player["gold"] >= SHOP[buy]:
                player["gold"] -= SHOP[buy]
                print(f'–¢—ã –∫—É–ø–∏–ª {buy}! –û—Å—Ç–∞–ª–æ—Å—å {player["gold"]} –∑–æ–ª–æ—Ç–∞.')
                if buy in HEALTH_ITEMS:
                    player["health"] += HEALTH_ITEMS[buy]
                    print(f'–ó–¥–æ—Ä–æ–≤—å–µ +{HEALTH_ITEMS[buy]} ‚Üí {player["health"]}')
                elif buy in DAMAGE_ITEMS:
                    player["damage"] += DAMAGE_ITEMS[buy]
                    print(f'–£—Ä–æ–Ω +{DAMAGE_ITEMS[buy]} ‚Üí {player["damage"]}')
                else:
                    player["inventory"].append(buy)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç—ã –Ω–∞ —Å–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                    check_quest_progress(db, player, item_acquired=buy)
                save_player(db, player)
            else:
                print('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!')
        else:
            print('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!')
    return player

def show_character(player):
    print('\n‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì')
    print(player["username"])
    print(f'–ó–î–û–†–û–í–¨–ï: {player["health"]}')
    print(f'–£–†–û–í–ï–ù–¨: {player["lvl"]}')
    print(f'–ó–û–õ–û–¢–û: {player["gold"]}')
    print(f'–£–†–û–ù: {player["damage"]}')
    print('‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë')

def show_inventory(db, player):
    print('–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:')
    for item in player["inventory"]:
        print(item)
    while True:
        do = input("–ß—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å? (–∏–ª–∏ '–≤—ã–π—Ç–∏'): ").title()
        if do == '–í—ã–π—Ç–∏' or do == '':
            break
        elif do in player["inventory"]:
            if do in HEALTH_ITEMS:
                print(f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {do}, –∑–¥–æ—Ä–æ–≤—å–µ +{HEALTH_ITEMS[do]}')
                player["health"] += HEALTH_ITEMS[do]
                player["inventory"].remove(do)
                save_player(db, player)
            elif do in DAMAGE_ITEMS:
                print(f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {do}, —É—Ä–æ–Ω +{DAMAGE_ITEMS[do]}')
                player["damage"] += DAMAGE_ITEMS[do]
                player["inventory"].remove(do)
                save_player(db, player)
            elif do == '–ö–µ–π—Å':
                case_open(db, player)
            else:
                print(f'–¢—ã –¥–µ—Ä–∂–∏—à—å {do}, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.')
        else:
            print('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!')

def case_open(db, player):
    if '–ö–µ–π—Å' in player["inventory"]:
        print('\n–¢—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å –∫–µ–π—Å...')
        case_items = list(TREASURES.keys()) + list(HEALTH_ITEMS.keys()) + list(DAMAGE_ITEMS.keys()) + ['–ö–µ–π—Å'] + ["–ú—É—Å–æ—Ä"]*7
        item = random.choice(case_items)
        print(f'–í—ã–ø–∞–ª–æ: {item}!')
        player["inventory"].remove('–ö–µ–π—Å')
        if item != "–ú—É—Å–æ—Ä":
            player["inventory"].append(item)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç—ã –Ω–∞ —Å–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            check_quest_progress(db, player, item_acquired=item)
        save_player(db, player)
    else:
        print('–ù–µ—Ç –∫–µ–π—Å–∞!')

def check_quest_progress(db, player, monster_killed=None, item_acquired=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–æ–≤"""
    if 'quests' not in player:
        player['quests'] = {}
    
    for quest_id, quest_data in player['quests'].items():
        if quest_data['completed']:
            continue
        quest = QUESTS[quest_id]
        if quest['type'] == 'kill_monster' and monster_killed == quest['target']:
            quest_data['progress'] += 1
        elif quest['type'] == 'collect_item' and item_acquired == quest['target']:
            quest_data['progress'] += 1
        
        if quest_data['progress'] >= quest['amount']:
            quest_data['completed'] = True
            print(f'\nüéâ –ö–≤–µ—Å—Ç "{quest["description"]}" –≤—ã–ø–æ–ª–Ω–µ–Ω!')
            # –í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥
            player['gold'] += quest['rewards'].get('gold', 0)
            for item in quest['rewards'].get('items', []):
                player['inventory'].append(item)
            print(f'–ù–∞–≥—Ä–∞–¥–∞: {quest["rewards"].get("gold", 0)} –∑–æ–ª–æ—Ç–∞, –ø—Ä–µ–¥–º–µ—Ç—ã: {", ".join(quest["rewards"].get("items", []))}')
        
    save_player(db, player)

def quest_menu(db, player):
    """–ú–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–≤–µ—Å—Ç–∞–º–∏"""
    while True:
        print("\n--- –ö–≤–µ—Å—Ç—ã ---")
        print("1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã")
        print("2. –ü—Ä–∏–Ω—è—Ç—å –∫–≤–µ—Å—Ç")
        print("3. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã")
        print("0. –ù–∞–∑–∞–¥")
        choice = input("–í—ã–±–æ—Ä: ")
        if choice == "1":
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:")
            for quest_id, quest in QUESTS.items():
                if quest_id not in player.get('quests', {}):
                    print(f"{quest_id}: {quest['description']} (–¶–µ–ª—å: {quest['amount']} {quest['target']})")
        elif choice == "2":
            quest_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∫–≤–µ—Å—Ç–∞: ")
            if quest_id in QUESTS and quest_id not in player.get('quests', {}):
                player['quests'][quest_id] = {'progress': 0, 'completed': False}
                print(f"–ö–≤–µ—Å—Ç {quest_id} –ø—Ä–∏–Ω—è—Ç!")
                save_player(db, player)
            else:
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ –∫–≤–µ—Å—Ç —É–∂–µ –ø—Ä–∏–Ω—è—Ç!")
        elif choice == "3":
            if not player.get('quests'):
                print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!")
            else:
                print("\n–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:")
                for quest_id, quest_data in player['quests'].items():
                    quest = QUESTS[quest_id]
                    status = "–í—ã–ø–æ–ª–Ω–µ–Ω" if quest_data['completed'] else f"{quest_data['progress']}/{quest['amount']}"
                    print(f"{quest_id}: {quest['description']} (–ü—Ä–æ–≥—Ä–µ—Å—Å: {status})")
        elif choice == "0":
            break
        else:
            print("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!")

def battle(db, player):
    LVL = player["lvl"]
    GOLD = player["gold"]
    DAMAGE = player["damage"]
    HEALTH = player["health"]
    max_health = HEALTH

    if not MONSTERS:
        print("–ú–æ–Ω—Å—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ game_items.json!")
        return player
    monster_name = random.choice(list(MONSTERS.keys()))
    monster = MONSTERS[monster_name]
    
    monster_health = monster["base_health"] + (LVL * 10)
    monster_damage = monster["base_damage"] + (LVL * 2)
    max_monster_health = monster_health
    
    print(f'\n{monster["description"]}')
    print(f'–¢–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ: {HEALTH} –¢–≤–æ–π —É—Ä–æ–Ω: {DAMAGE}')
    print(f'–ó–¥–æ—Ä–æ–≤—å–µ {monster_name}: {monster_health} –£—Ä–æ–Ω: {monster_damage}')
    
    while True:
        monster_health -= DAMAGE
        if monster_health <= 0 or HEALTH <= 0:
            if monster_health <= 0:
                print(f'\n–¢—ã –ø–æ–±–µ–¥–∏–ª {monster_name}!')
                if HEALTH <= 0:
                    HEALTH = 0
                HEALTH += monster_damage + 2
                LVL += (max_monster_health - monster_damage) // 10
                GOLD += monster["gold_reward"]
                
                drop = random.choices(
                    [d["item"] for d in monster["item_drops"]],
                    weights=[d["chance"] for d in monster["item_drops"]],
                    k=1
                )[0]
                if drop != "–ú—É—Å–æ—Ä":
                    player["inventory"].append(drop)
                    print(f'–¢—ã –ø–æ–ª—É—á–∏–ª: {drop}!')
                    check_quest_progress(db, player, item_acquired=drop)
                print(f'–ü–æ–ª—É—á–µ–Ω–æ {monster["gold_reward"]} –∑–æ–ª–æ—Ç–∞.')
                check_quest_progress(db, player, monster_killed=monster_name)
                break
            elif HEALTH <= 0:
                print(f'\n{monster_name} –ø–æ–±–µ–¥–∏–ª —Ç–µ–±—è!')
                input('–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è —Å–±–µ–∂–∞—Ç—å...')
                if random.randint(1, 100) <= 50:
                    print('–°–±–µ–∂–∞–ª!')
                    HEALTH = random.randint(1, max_health)
                    GOLD += random.randint(1, 7)
                else:
                    HEALTH = 0
                    print('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å.')
                break
        input(f'–¢—ã –±—å—ë—à—å {monster_name}, —É –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å {monster_health} –∑–¥–æ—Ä–æ–≤—å—è.')
        HEALTH -= monster_damage
    
    player["lvl"] = LVL
    player["gold"] = GOLD
    player["damage"] = DAMAGE
    player["health"] = HEALTH
    save_player(db, player)
    return player

def get_next_marketplace_id(db):
    marketplace = db.get_marketplace()
    if not marketplace:
        return 1
    return max(slot["slot_id"] for slot in marketplace) + 1

def show_marketplace(db):
    marketplace = db.get_marketplace()
    if not marketplace:
        print("–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –ø—É—Å—Ç.")
        return
    print("–°–ª–æ—Ç—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞:")
    for slot in marketplace:
        buyer = slot.get("buyer_id")
        seller_username = db.data.get(slot["seller_id"], {}).get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        status = "–ü—Ä–æ–¥–∞–Ω–æ" if buyer else "–í –ø—Ä–æ–¥–∞–∂–µ"
        print(f"ID: {slot['slot_id']} | {slot['item']} | –¶–µ–Ω–∞: {slot['price']} | –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_username}, ID: {slot['seller_id']} | –°—Ç–∞—Ç—É—Å: {status}")

def add_item_to_marketplace(db, player, item, price):
    if item not in player["inventory"]:
        print("–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!")
        return
    slot_id = get_next_marketplace_id(db)
    slot = {
        "slot_id": slot_id,
        "item": item,
        "seller_id": db.current_id,
        "price": price,
        "buyer_id": None
    }
    db.add_marketplace_slot(slot)
    player["inventory"].remove(item)
    save_player(db, player)
    print(f"–ü—Ä–µ–¥–º–µ—Ç {item} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑–∞ {price} –∑–æ–ª–æ—Ç–∞ (ID —Å–ª–æ—Ç–∞: {slot_id})")

def buy_item_from_marketplace(db, player, slot_id):
    marketplace = db.get_marketplace()
    slot = next((s for s in marketplace if s["slot_id"] == slot_id and s["buyer_id"] is None), None)
    if not slot:
        print("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–ª–æ—Ç–∞ –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –∫—É–ø–ª–µ–Ω!")
        return
    if player["gold"] < slot["price"]:
        print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")
        return
    player["gold"] -= slot["price"]
    player["inventory"].append(slot["item"])
    slot["buyer_id"] = db.current_id
    db.update_marketplace([s if s["slot_id"] != slot_id else slot for s in marketplace])
    save_player(db, player)
    print(f"–¢—ã –∫—É–ø–∏–ª {slot['item']} –∑–∞ {slot['price']} –∑–æ–ª–æ—Ç–∞!")

def remove_my_marketplace_slot(db, player, slot_id):
    marketplace = db.get_marketplace()
    slot = next((s for s in marketplace if s["slot_id"] == slot_id and s["seller_id"] == db.current_id and s["buyer_id"] is None), None)
    if not slot:
        print("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–ª–æ—Ç–∞ –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –∫—É–ø–ª–µ–Ω!")
        return
    player["inventory"].append(slot["item"])
    db.remove_marketplace_slot(slot_id)
    save_player(db, player)
    print(f"–¢—ã —Å–Ω—è–ª —Å –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç {slot['item']} (ID —Å–ª–æ—Ç–∞: {slot_id})")

def marketplace_menu(db, player):
    while True:
        print("\n--- –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å ---")
        print("1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ—Ç—ã")
        print("2. –í—ã—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        print("3. –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        print("4. –°–Ω—è—Ç—å —Å–≤–æ–π –ø—Ä–µ–¥–º–µ—Ç —Å –ø—Ä–æ–¥–∞–∂–∏")
        print("0. –ù–∞–∑–∞–¥")
        choice = input("–í—ã–±–æ—Ä: ")
        if choice == "1":
            show_marketplace(db)
        elif choice == "2":
            print("–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:", player["inventory"])
            item = input("–ß—Ç–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å? ").title()
            if item not in player["inventory"]:
                print("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!")
                continue
            price = input("–¶–µ–Ω–∞: ")
            try:
                price = int(price)
            except ValueError:
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞!")
                continue
            add_item_to_marketplace(db, player, item, price)
        elif choice == "3":
            slot_id = input("ID —Å–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ")
            try:
                slot_id = int(slot_id)
            except ValueError:
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")
                continue
            buy_item_from_marketplace(db, player, slot_id)
        elif choice == "4":
            slot_id = input("ID —Å–ª–æ—Ç–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è: ")
            try:
                slot_id = int(slot_id)
            except ValueError:
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")
                continue
            remove_my_marketplace_slot(db, player, slot_id)
        elif choice == "0":
            break
        else:
            print("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!")

while True:
    print("\n–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å? 1.–í –±–æ–π! 2.–ú–∞–≥–∞–∑–∏–Ω 3.–ü–µ—Ä—Å–æ–Ω–∞–∂ 4.–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å 5.–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ 6.–ö–≤–µ—Å—Ç—ã 0.–í—ã—Ö–æ–¥")
    smth = input("–í—ã–±–æ—Ä: ")
    if smth == '1':
        player = battle(db, player)
    elif smth == '2':
        player = shop(db, player)
    elif smth == '3':
        show_character(player)
    elif smth == '4':
        show_inventory(db, player)
    elif smth == '5':
        marketplace_menu(db, player)
    elif smth == '6':
        quest_menu(db, player)
    elif smth == '0':
        print("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã.")
        break
    else:
        print('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!')
    if player["health"] <= 0:
        print('\n–¢—ã —É–º–µ—Ä! –ù–∞—á–∏–Ω–∞–µ—à—å —Å–Ω–∞—á–∞–ª–∞.')
        player["lvl"] = 1
        player["gold"] = 10
        player["damage"] = 10
        player["health"] = 100
        player["inventory"] = []
        player["quests"] = {}
        save_player(db, player)